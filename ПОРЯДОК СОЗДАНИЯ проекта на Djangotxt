for i in range(1, 6):
print(i)
Что выведет на экран:
1
2
3
4
5
Функция range создает список чисел, следующих от первого до второго с заданным шагом (начало, конец и шаг мы
передаем функции как параметры, если шаг не указать, как в примере выше, он будет по умолчанию равен 1).
Обрати внимание что второе число (конец списка) не включается в результат работы функции ( range(1, 6) создает
список от 1 до 5, не включающий 6). Это потому, что «range» — полуоткрытый диапазон, то есть включает в себя
первое значение, но не включает последнего.

ПОРЯДОК СОЗДАНИЯ проекта на Django.
создадим виртуальное окружение под именем myvenv.
C:\Program Files\Python\Python35\python -m venv myvenv.
затем войти в директорию myvenv\Scripts\activate (выполнить activate.bat)
(myvenv) C:\Users\Name\djangogirls>
После запуска virtualenv ты можешь установить Django используя pip . Набери в командной строке строке:
 pip install django==1.8 (обрати внимание на двойной знак равенства: == ).
(myvenv) ~$ pip install django==1.8
Downloading/unpacking django==1.8
Installing collected packages: django
Successfully installed django
Cleaning up...
Можешь проверить установленные пакеты командой: pip list

Создать новый проект Django:
(myvenv) C:\Users\Name\djangogirls> django-admin startproject mysite.
. Точка крайне важна, потому что говорит скрипту устанавливать Django в вашем текущем каталоге
(который и обозначается сокращённо точкой . )В Windows; не забудьте добавить точку . в конце:
django-admin.py это скрипт, который создаст необходимую структуру директорий и файлы для нас. 
теперь имеем следующую структуру проекта:
djangogirls
├───manage.py
└───mysite
settings.py
urls.py
wsgi.py
__init__.py

manage.py это другой скрипт, который помогает с управлением сайтом. С помощью него мы сможем запустить веб-
сервер на твоем компьютере без установки дополнительных программ.

Файл settings.py содержит настройки для твоего веб-сайта.
Внесем изменения в mysite/settings.py:
LANGUAGE_CODE = 'ru-RU'
TIME_ZONE = 'Europe/Kiev'
Добавить в настройки информацию о расположении статических файлов

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

"""os.path.join(path1, path3, ...)  
Объединяет пути.
>>> os.path.join('c:\\', 'system\\apps\\Python\\', 'Python.app')
'c:\\system\\apps\\Python\\Python.app'
"""
Создать базу данных для блога, набери в командной строке следующее: python manage.py migrate

Запустить веб-сервер и посмотреть работает ли наш веб-сайт!
python manage.py runserver
http://127.0.0.1:8000/

**************************************************************************************************
Создание приложения

(myvenv) ~/djangogirls$ python manage.py startapp blog
В проекте появилась новая папка blog , которая содержит некоторые файлы.
Структура проекта, таким образом, будет выглядеть так:
djangogirls
├── mysite
| 		__init__.py
| 		settings.py
| 		urls.py
| 		wsgi.py
├── manage.py
└── blog
	├── migrations
	| 		__init__.py
	├── __init__.py
	├── admin.py
	├── models.py
	├── tests.py
	└── views.py
После того как приложение создано, нам нужно сообщить Django, что теперь он должен его использовать. Мы
сделаем это через файл mysite/settings.py . Нам нужно найти INSTALLED_APPS и добавить к списку 'blog', прямо
перед ) . Конечный результат должен выглядеть следующим образом:
INSTALLED_APPS = (
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
'blog',
)

Создание модели записи в блоге
В файле blog/models.py мы определяем все Модели - модель записи для блога также пойдет сюда.
Открой файл blog/models.py , удали весь текст и вставь на его место следующий код:

from django.db import models
from django.utils import timezone
class Post(models.Model):
author = models.ForeignKey('auth.User')
title = models.CharField(max_length=200)
text = models.TextField()
created_date = models.DateTimeField(
default=timezone.now)
published_date = models.DateTimeField(
blank=True, null=True)
def publish(self):
self.published_date = timezone.now()
self.save()
def __str__(self):
return self.title


Создаем таблицы моделей в базе данных
Последним шагом будет добавление нашей модели в базу данных. Сначала мы должны дать Django знать, что
сделали изменения в нашей модели (мы её только что создали!). Набери python manage.py makemigrations blog .
Должно получиться примерно так:
(myvenv) ~/djangogirls$ python manage.py makemigrations blog
Migrations for 'blog':
0001_initial.py:
- Create model Post
Django создал для нас файл с миграцией для базы данных.

Набери python manage.py migrate blog , результат
должен быть следующим:
(myvenv) ~/djangogirls$ python manage.py migrate blog
Operations to perform:
Apply all migrations: blog
Running migrations:
Rendering model states... DONE
Applying blog.0001_initial... OK
Модель записи для блога теперь в базе данных и было бы неплохо посмотреть на неё.

Администрирование Django
Чтобы добавлять, редактировать и удалять записи, для которых мы только сделали модель, нам потребуется
использовать права администратора в Django.
Давай откроем файл blog/admin.py и заменим его содержимое на:
from django.contrib import admin
from .models import Post
admin.site.register(Post)

Мы импортировали (включили) модель Post, которая была определена в предыдущей
главе. Чтобы наша модель стала доступна на странице администрирования, нам нужно зарегистрировать её при
помощи admin.site.register(Post).
теперь нам нужно взглянуть на модель Post. Не забудь запустить веб-сервер командой python manage.py
runserver . Перейди в браузер и набери адрес http://127.0.0.1:8000/admin/ Ты увидишь страницу авторизации:
Чтобы залогиниться, тебе сначала нужно создать суперпользователя (англ. superuser) - пользователя, который
имеет полный доступ к управлению сайтом. Вернись к командной строке, набери python manage.py createsuperuser ,
и нажми Enter. При появлении запроса введи имя пользователя (строчными буквами, без пробелов), адрес
электронной почты и пароль. Не беспокойся, если пароль не появляется на экране по мере ввода, так и задумано.
Просто напечатай его и нажмите Enter , чтобы продолжить. Результат должен выглядеть следующим образом (имя
пользователя и почта соответственно будут твоими):


